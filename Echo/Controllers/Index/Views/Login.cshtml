@model Echo.Models.LoginViewModel;

@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Mvc.Localization

@using Echo.Controllers
@using Echo.Models

@inject IStringLocalizer<IndexController> Localizer

@{
	Layout = "/Controllers/Shared/_Layout.cshtml";
	
	ViewData["Title"] = Localizer["Login"];
	ViewData["Description"] = Localizer["Login"];
	ViewData["currentUrl"] = $"{ViewContext.HttpContext.Request.Scheme}://{ViewContext.HttpContext.Request.Host}{ViewContext.HttpContext.Request.Path}{ViewContext.HttpContext.Request.QueryString}";
}

@section Head {
	<link rel="stylesheet" href="/css/login.css"/>
}

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="container">
	<div class="text-center align-self-center centrify">
		<div class="section">
			<h6 class="mb-0 pb-3"><span>Log In </span><span>Sign Up</span></h6>
			<input class="hidden-checkbox" type="checkbox" id="reg-log" name="reg-log">
			<label for="reg-log"></label>
			<div class="card-3d-wrap mx-auto">
				<div class="card-3d-wrapper">
					<div class="card-front">
						<div class="center-wrap">
							<div class="section">
								<h4 class="mb-4 pb-3">Log In</h4>
								@using (Html.BeginForm("SignIn", "Index", FormMethod.Post, new { @class = "vert-form" }))
								{
									@Html.AntiForgeryToken()
									<div class="form-group">
										<i class="input-icon uil uil-user"></i>
										@Html.TextBoxFor(m => m.SignInUsername, new { @class = "form-style", autocomplete = "off", placeholder="Your Username" })
									</div>
									@if (ViewData.ModelState.ContainsKey("SignInUsername") && ViewData.ModelState["SignInUsername"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["SignInUsername"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<div class="form-group">
										<i class="input-icon uil uil-lock-alt"></i>
										@Html.PasswordFor(m => m.SignInPassword, new { @class = "form-style", autocomplete = "off", placeholder="Your Password" })
									</div>
									@if (ViewData.ModelState.ContainsKey("SignInPassword") && ViewData.ModelState["SignInPassword"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["SignInPassword"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<button type="submit" class="btn mt-4">SUBMIT</button>
								}
							</div>
						</div>
					</div>
					<div class="card-back">
						<div class="center-wrap">
							<div class="section">
								<h4 class="mb-4 pb-3">Sign Up</h4>
								@using (Html.BeginForm("SignUp", "Index", FormMethod.Post, new { @class = "vert-form" }))
								{
									@Html.AntiForgeryToken()
									<div class="form-group">
										<i class="input-icon uil uil-user"></i>
										@Html.TextBoxFor(m => m.Name, new { @class = "form-style", autocomplete = "off", placeholder = "Your Full Name" })
									</div>
									@if (ViewData.ModelState.ContainsKey("Name") && ViewData.ModelState["Name"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["Name"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<div class="form-group">
										<i class="input-icon uil uil-user"></i>
										@Html.TextBoxFor(m => m.Username, new { @class = "form-style", autocomplete = "off", placeholder = "Your Username" })
									</div>
									@if (ViewData.ModelState.ContainsKey("Username") && ViewData.ModelState["Username"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["Username"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<div class="form-group">
										<i class="input-icon uil uil-lock-alt"></i>
										@Html.PasswordFor(m => m.Password, new { @class = "form-style", autocomplete = "off", placeholder = "Your Password" })
									</div>
									@if (ViewData.ModelState.ContainsKey("Password") && ViewData.ModelState["Password"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["Password"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<div class="form-group">
										<i class="input-icon uil uil-lock-alt"></i>
										@Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-style", autocomplete = "off", placeholder = "Confirm Password" })
									</div>
									@if (ViewData.ModelState.ContainsKey("ConfirmPassword") && ViewData.ModelState["ConfirmPassword"].Errors.Count > 0)
									{
										<ul class="mt-2 errorlist">
										@foreach (var error in ViewData.ModelState["ConfirmPassword"].Errors)
										{
											<li>@error.ErrorMessage</li>
										}
										</ul>
									}
									<button type="submit" class="btn mt-2">SUBMIT</button>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
